"""core/___prelude.rock
"""

__declare('Iterator', class Iterator {
  var more, next

  def __init(more, next) {
    this.more = more
    this.next = next
  }

  def __iter() = this

  def more() = (this.more)()
  def next() = (this.next)()

  def each(f) =
    while this.more() {
      f(this.next())
    }

  def map(f) =
    Iterator(\. this.more(), \. f(this.next()))

  def to(klass) = klass.fromIterable(this)
})

__declare('Range', class Range {
  var start, end

  def __init(start, end) {
    this.start = start
    this.end = end
  }

  def __iter() {
    var i = this.start
    Iterator(
      \. i < this.end,
      \ {
        i = i + 1
        i - 1
      })
  }

  def __str() =
    "Range(" + this.start.to(String) + ", " + this.end.to(String) + ")"

  def to(klass) =
    switch klass {
      case List: this.__iter().to(klass)
      default: super.to(klass)
    }
})
